inputs:
  application:
    description: The application to interact with
    required: true
  tenv_version:
    description: The tenv version to use
    required: true
  github_workspace:
    description: GitHub Workspace Path
    required: true
    default: /github/workspace
  WEBHOOK_SECRET:
    description: "GitHub Webhook secret"
    required: false
  PAT_TOKEN:
    description: "Github PAT Token For Making Calls"
    required: false

runs:
  using: "composite"
  steps:
    - name: Create Plugin Cache Directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.github_workspace }}/.terraform.d/plugin-cache

    - name: Cache Terraform Plugins
      uses: actions/cache@v4
      with:
        path: ${{ inputs.github_workspace }}/.terraform.d/plugin-cache
        key: ${{ runner.os }}-tf-plugin-cache-${{ hashFiles('**/.*terragrunt-version') }}

    - name: Get Tooling Binaries
      uses: ./.github/workflows/composite/tooling-binaries
      with:
        application: ${{ inputs.application }}
        tenv_version: ${{ inputs.tenv_version }}
        github_workspace: ${{ inputs.github_workspace }}

    - name: Init Terragrunt application
      working-directory: ./terraform/configuration/us-west-2/dev/applications/${{ inputs.application }}
      shell: bash
      env:
        TF_PLUGIN_CACHE_DIR: ${{ inputs.github_workspace }}/.terraform.d/plugin-cache
        TF_PLUGIN_CACHE_MAY_BREAK_DEPENDENCY_LOCK_FILE: "enabled"
      run: |
        terragrunt init --input=false

    - name: Plan Terragrunt application
      working-directory: ./terraform/configuration/us-west-2/dev/applications/${{ inputs.application }}
      shell: bash
      env:
        TF_VAR_github_PAT_secret_string: ${{ inputs.PAT_TOKEN }}
        TF_VAR_github_webhook_secret_string: ${{ inputs.WEBHOOK_SECRET }}
      run: |
        terragrunt plan --input=false -out plan.tfplan

    - name: Summary
      working-directory: ./terraform/configuration/us-west-2/dev/applications/${{ inputs.application }}
      shell: bash
      env:
        APPLICATION: ${{ inputs.application }}
      run: |
        terragrunt show -json plan.tfplan > $APPLICATION-plan.json

        ACTIONS=$(jq -s --arg app "$APPLICATION" '[.[].resource_changes[] | {addr: .address, action: .change.actions[]}] |
        group_by(.action) | {application: $app, changes: .}' "$APPLICATION-plan.json" |
        jq -r '.changes | flatten | group_by(.action) |
        map({ action: .[0].action, count: length, addresses: map(.addr) }) |
        .[] | select(.action != "no-op" and .action != "read") |
        "## \(.action | ascii_upcase) (\(.count))","- `\(.addresses[])`", ""')

        if [ -z "${ACTIONS}" ];
        then
          echo "> [!NOTE]" >> $GITHUB_STEP_SUMMARY
          echo "> No actions." >> $GITHUB_STEP_SUMMARY
        else
          echo "> [!CAUTION]" >> $GITHUB_STEP_SUMMARY
          echo "> Review actions." >> $GITHUB_STEP_SUMMARY
          echo "$ACTIONS" >> $GITHUB_STEP_SUMMARY
        fi
