name: get-tooling-binaries
description: Workflow to get binaries for tooling

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Flip tenv flags
      shell: bash
      run: |
        echo "TENV_AUTO_INSTALL=true" >> $GITHUB_ENV
        echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV

    - name: Restore tenv cache
      id: cache-tenv-restore
      uses: actions/cache/restore@v4
      with:
        path: ~/.tenv/
        key: ${{ runner.os }}-tenv-${{ vars.TENV_VERSION }}
        restore-keys: |
          ${{ runner.os }}-tenv-

    - name: Set up tenv (cache miss)
      if: steps.cache-tenv-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -O -L "https://github.com/tofuutils/tenv/releases/latest/download/tenv_${{ vars.TENV_VERSION }}_arm64.deb"
        sudo dpkg -i "tenv_${{ vars.TENV_VERSION }}_arm64.deb"

    - name: Using Cached tenv
      if: steps.cache-tenv-restore.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "Using cached tenv version: ${{ vars.TENV_VERSION }}"

    - name: Install Terraform
      working-directory: /terraform/configuration/us-west-2/dev/applications/${{ inputs.application }}
      shell: bash
      run: |
        tenv install terraform

    - name: Install Terragrunt
      working-directory: /terraform/configuration/us-west-2/dev/applications/${{ inputs.application }}
      shell: bash
      run: |
        tenv install terragrunt

    - name: Cache tenv (w/ Terraform and Terragrunt) installation
      id: cache-tenv-save
      uses: actions/cache/save@v4
      with:
        path: ~/.tenv/
        key: ${{ steps.cache-tenv-restore.outputs.cache-primary-key }}
